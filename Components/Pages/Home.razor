@page "/"
@using Microsoft.EntityFrameworkCore
@using h5_blazor_web_app.Codes
@using h5_blazor_web_app.Models
@using Microsoft.AspNetCore.Components
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AsyncEncryptionHandler asyncEncryption
@inject TodoDbContext DbContext;
@rendermode InteractiveServer

@attribute [Microsoft.AspNetCore.Authorization.Authorize(Policy = "AuthenticatedUser")]


<PageTitle>Home</PageTitle>

<h4>Logged in as: @m_userName</h4>
<br />
@if (m_cprValidated)
{
    <div>
        <label>Item</label>
        <input class="form-control" type="text" @bind="m_item"/>
        <button class="btn btn-primary" @onclick="SubmitItem">Add item</button>
    </div>
    <p>Data from Database:</p>
    <ul>
        @foreach (var item in m_todoLists)
        {
            <li>@asyncEncryption.Decrypt(@item.Item)</li>
        }
    </ul>
}
else
{
    <div>
        <label>CPR Nummer</label>
        <input class="form-control" type="number" maxlength="10" @bind="m_cprNr" />
        <button class="btn btn-primary" @onclick="SubmitCpr">Indsæt CPR Nummer</button>
        <p class="text-danger">@m_errorMessage</p>
    </div>
}

@code {
    private string? m_cprNr { get; set; }
    private string? m_item { get; set; }
    private string m_userName { get; set; } = null!;
    private bool m_cprValidated { get; set; } = false;
    private string? m_errorMessage { get; set; }

    private List<TodoList> m_todoLists { get; set; } = new List<TodoList>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            m_userName = user.Identity.Name!;
        }
    }

    /// <summary>
    /// Submits the cpr number
    /// </summary>
    public async void SubmitCpr()
    {
        if (String.IsNullOrEmpty(m_cprNr))
        {
            m_errorMessage = "CPR Nummer er påkrævet";
            return;
        }

        string cprHash = HashingHandler.GetBCryptHash(m_cprNr);

        if(await IsUserAssigned() == false)
        {
            await InsertCprNr(cprHash);
        }

        m_cprValidated = await IsCprValid();

        if (m_cprValidated)
        {
            m_todoLists = await GetTodoLists();
        }
        else
        {
            m_errorMessage = "CPR Nummer er ikke gyldigt";
        }
    }

    /// <summary>
    /// Submits the item to the database
    /// </summary>
    public void SubmitItem()
    {
        if (String.IsNullOrEmpty(m_item))
        {
            return;
        }

        InsertTodoItem(asyncEncryption.Encrypt(m_item!, Helpers.Helpers.ReturnType._byteArray));
    }

    /// <summary>
    /// Fetches the todo lists from the database
    /// </summary>
    /// <returns></returns>
    private async Task<List<TodoList>> GetTodoLists()
    {
        return await DbContext.TodoLists.Where(c => c.User == m_userName).ToListAsync();
    }

    /// <summary>
    /// Inserts the cpr number into the database
    /// </summary>
    /// <param name="cprHash"></param>
    /// <returns></returns>
    private async Task InsertCprNr(string cprHash)
    {
        var cpr = new Cpr
        {
            User = m_userName!,
            CprNr = cprHash
        };

        DbContext.Cprs.Add(cpr);
        await DbContext.SaveChangesAsync();
    }

    /// <summary>
    /// Inserts the todo item into the database
    /// </summary>
    /// <param name="encryptedItemBytes"></param>
    private async void InsertTodoItem(byte[] encryptedItemBytes)
    {
        var todoItem = new TodoList
        {
            User = m_userName!,
            Item = encryptedItemBytes
        };

        DbContext.TodoLists.Add(todoItem);

        m_todoLists.Add(todoItem);
        m_item = "";

        await DbContext.SaveChangesAsync();
    }

    /// <summary>
    /// Validates if the user is assigned to a cpr number
    /// </summary>
    /// <returns></returns>
    private async Task<bool> IsUserAssigned()
    {
        var cpr = await DbContext.Cprs.FirstOrDefaultAsync(c => c.User == m_userName);
        if (cpr != null)
        {
            return true;
        }

        return false;
    }


    /// <summary>
    /// Validates if the cpr number is assigned to this user
    /// </summary>
    /// <returns></returns>
    private async Task<bool> IsCprValid()
    {
        Cpr? matchedEntry = await DbContext.Cprs.FirstOrDefaultAsync(c => c.User == m_userName);
        if (matchedEntry == null)
        {
            m_errorMessage = "No user found with your username.";
            return false;
        }
        return HashingHandler.VerifyBCrypt(m_cprNr!, matchedEntry!.CprNr);
    }
}